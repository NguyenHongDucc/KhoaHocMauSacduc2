import streamlit as st
import numpy as np
from PIL import Image
from io import BytesIO


st.set_page_config(page_title="T√°ch m√†u CMYK", layout="wide")
st.title("üñºÔ∏è T√°ch ·∫£nh th√†nh 4 b·∫£n m√†u Cyan ‚Äì Magenta ‚Äì Yellow ‚Äì Black (CMYK)")

uploaded_file = st.file_uploader("üìÇ T·∫£i ·∫£nh RGB b·∫•t k·ª≥ (PNG/JPG)", type=["jpg", "jpeg", "png"])

# --- H√†m chuy·ªÉn RGB (0‚Äì255) ‚Üí CMYK (0‚Äì1) ---
def rgb_to_cmyk_array(rgb_image):
    rgb_norm = rgb_image / 255.0
    R, G, B = rgb_norm[..., 0], rgb_norm[..., 1], rgb_norm[..., 2]
    K = 1 - np.max(rgb_norm, axis=2)
    C = (1 - R - K) / (1 - K + 1e-8)
    M = (1 - G - K) / (1 - K + 1e-8)
    Y = (1 - B - K) / (1 - K + 1e-8)
    C[np.isnan(C)] = 0
    M[np.isnan(M)] = 0
    Y[np.isnan(Y)] = 0
    return C, M, Y, K

# --- H√†m t√¥ m√†u cho m·ªói k√™nh CMYK ---
def apply_color_mask_channel(mask, channel="C"):
    """Tr·∫£ v·ªÅ ·∫£nh ch·ªâ ch·ª©a k√™nh m√†u CMYK ƒë∆∞·ª£c t√°ch ri√™ng, m√¥ ph·ªèng in th·ª±c t·∫ø"""
    h, w = mask.shape
    color = {
        "C": (0, 255, 255),    # Cyan
        "M": (255, 0, 255),    # Magenta
        "Y": (255, 255, 0),    # Yellow
        "K": (100, 100, 100)   # Black
    }[channel]
    base = np.ones((h, w, 3), dtype=np.uint8) * 255  # N·ªÅn tr·∫Øng
    overlay = np.zeros_like(base)
    for i in range(3):
        overlay[..., i] = (1 - mask) * 255 + mask * color[i]
    return overlay.astype(np.uint8)


# ---T·∫£i b·∫£n t√°ch m√†u---
def get_download_button(img_array, label="T·∫£i ·∫£nh", filename="split.png"):
    img_pil = Image.fromarray(img_array)
    buf = BytesIO()
    img_pil.save(buf, format="PNG")
    byte_im = buf.getvalue()
    st.download_button(
        label=label,
        data=byte_im,
        file_name=filename,
        mime="image/png"
    )



# --- X·ª≠ l√Ω khi c√≥ ·∫£nh ---
if uploaded_file:
    # ·∫¢nh g·ªëc
    image = Image.open(uploaded_file).convert("RGB")
    st.subheader("üñºÔ∏è ·∫¢nh g·ªëc")
    
    #  Resize ·∫£nh g·ªëc ƒë·ªÉ hi·ªÉn th·ªã nh·ªè h∆°n
    display_width = 250  # ho·∫∑c 400 n·∫øu b·∫°n mu·ªën nh·ªè h∆°n n·ªØa
    w_percent = display_width / float(image.width)
    new_height = int(float(image.height) * w_percent)
    image_resized = image.resize((display_width, new_height), Image.LANCZOS)

    #  Hi·ªÉn th·ªã ·∫£nh ƒë√£ resize
    st.image(image_resized, caption="·∫¢nh g·ªëc (ƒë√£ thu nh·ªè)", use_container_width=False)

    # Convert ‚Üí NumPy
    rgb_np = np.array(image)
    C, M, Y, K = rgb_to_cmyk_array(rgb_np)

    # Hi·ªÉn th·ªã b·∫£n t√°ch m√†u v·ªõi m√†u t∆∞∆°ng ·ª©ng
    st.subheader("üñ®Ô∏è B·ªën b·∫£n t√°ch m√†u theo m·ª±c in th·ª±c t·∫ø (CMYK)")

    col1, col2, col3, col4 = st.columns(4)

    with col1:
        st.markdown("### üü¶ Cyan")
        cyan_img = apply_color_mask_channel(C, "C")  # xanh cyan
        st.image(cyan_img, use_container_width=True)
        get_download_button(cyan_img, label="‚¨áÔ∏è T·∫£i b·∫£n Cyan", filename="cyan_channel.png")


    with col2:
        st.markdown("### üü£ Magenta")
        magenta_img = apply_color_mask_channel(M, "M")  # t√≠m h·ªìng
        st.image(magenta_img, use_container_width=True)
        get_download_button(magenta_img, "‚¨áÔ∏è T·∫£i b·∫£n Magenta", "magenta_channel.png")


    with col3:
        st.markdown("### üü® Yellow")
        yellow_img = apply_color_mask_channel(Y, "Y")  # v√†ng
        st.image(yellow_img, use_container_width=True)
        get_download_button(yellow_img, "‚¨áÔ∏è T·∫£i b·∫£n Yellow", "yellow_channel.png")


    with col4:
        st.markdown("### ‚ö´ Black (Key)")
        black_img = apply_color_mask_channel(K, "K")  # x√°m ƒëen
        st.image(black_img, use_container_width=True)
        get_download_button(black_img, "‚¨áÔ∏è T·∫£i b·∫£n Black", "black_channel.png")
